// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sawtooth_sdk/protobuf/events_pb2/events.proto

/*
Package events_pb2 is a generated protocol buffer package.

It is generated from these files:
	sawtooth_sdk/protobuf/events_pb2/events.proto

It has these top-level messages:
	Event
	EventList
	EventFilter
	EventSubscription
*/
package events_pb2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventFilter_FilterType int32

const (
	EventFilter_FILTER_TYPE_UNSET EventFilter_FilterType = 0
	EventFilter_SIMPLE_ANY        EventFilter_FilterType = 1
	EventFilter_SIMPLE_ALL        EventFilter_FilterType = 2
	EventFilter_REGEX_ANY         EventFilter_FilterType = 3
	EventFilter_REGEX_ALL         EventFilter_FilterType = 4
)

var EventFilter_FilterType_name = map[int32]string{
	0: "FILTER_TYPE_UNSET",
	1: "SIMPLE_ANY",
	2: "SIMPLE_ALL",
	3: "REGEX_ANY",
	4: "REGEX_ALL",
}
var EventFilter_FilterType_value = map[string]int32{
	"FILTER_TYPE_UNSET": 0,
	"SIMPLE_ANY":        1,
	"SIMPLE_ALL":        2,
	"REGEX_ANY":         3,
	"REGEX_ALL":         4,
}

func (x EventFilter_FilterType) String() string {
	return proto.EnumName(EventFilter_FilterType_name, int32(x))
}
func (EventFilter_FilterType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Event struct {
	// Used to subscribe to events and servers as a hint for how to deserialize
	// event_data and what pairs to expect in attributes.
	EventType  string             `protobuf:"bytes,1,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Attributes []*Event_Attribute `protobuf:"bytes,2,rep,name=attributes" json:"attributes,omitempty"`
	// Opaque data defined by the event_type.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Event) GetAttributes() []*Event_Attribute {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Event) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Transparent data defined by the event_type.
type Event_Attribute struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Event_Attribute) Reset()                    { *m = Event_Attribute{} }
func (m *Event_Attribute) String() string            { return proto.CompactTextString(m) }
func (*Event_Attribute) ProtoMessage()               {}
func (*Event_Attribute) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Event_Attribute) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Event_Attribute) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type EventList struct {
	Events []*Event `protobuf:"bytes,1,rep,name=events" json:"events,omitempty"`
}

func (m *EventList) Reset()                    { *m = EventList{} }
func (m *EventList) String() string            { return proto.CompactTextString(m) }
func (*EventList) ProtoMessage()               {}
func (*EventList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventList) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type EventFilter struct {
	// EventFilter is used when subscribing to events to limit the events
	// received within a given event type. See
	// validator/server/events/subscription.py for further explanation.
	Key         string                 `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	MatchString string                 `protobuf:"bytes,2,opt,name=match_string,json=matchString" json:"match_string,omitempty"`
	FilterType  EventFilter_FilterType `protobuf:"varint,3,opt,name=filter_type,json=filterType,enum=EventFilter_FilterType" json:"filter_type,omitempty"`
}

func (m *EventFilter) Reset()                    { *m = EventFilter{} }
func (m *EventFilter) String() string            { return proto.CompactTextString(m) }
func (*EventFilter) ProtoMessage()               {}
func (*EventFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventFilter) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *EventFilter) GetMatchString() string {
	if m != nil {
		return m.MatchString
	}
	return ""
}

func (m *EventFilter) GetFilterType() EventFilter_FilterType {
	if m != nil {
		return m.FilterType
	}
	return EventFilter_FILTER_TYPE_UNSET
}

type EventSubscription struct {
	// EventSubscription is used when subscribing to events to specify the type
	// of events being subscribed to, along with any additional filters. See
	// validator/server/events/subscription.py for further explanation.
	EventType string         `protobuf:"bytes,1,opt,name=event_type,json=eventType" json:"event_type,omitempty"`
	Filters   []*EventFilter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *EventSubscription) Reset()                    { *m = EventSubscription{} }
func (m *EventSubscription) String() string            { return proto.CompactTextString(m) }
func (*EventSubscription) ProtoMessage()               {}
func (*EventSubscription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *EventSubscription) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *EventSubscription) GetFilters() []*EventFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*Event_Attribute)(nil), "Event.Attribute")
	proto.RegisterType((*EventList)(nil), "EventList")
	proto.RegisterType((*EventFilter)(nil), "EventFilter")
	proto.RegisterType((*EventSubscription)(nil), "EventSubscription")
	proto.RegisterEnum("EventFilter_FilterType", EventFilter_FilterType_name, EventFilter_FilterType_value)
}

func init() { proto.RegisterFile("sawtooth_sdk/protobuf/events_pb2/events.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x52, 0xdd, 0x6a, 0xea, 0x40,
	0x10, 0x3e, 0x31, 0xea, 0x21, 0x13, 0x8f, 0xc4, 0xe5, 0xc8, 0x91, 0x03, 0x2d, 0x36, 0xd0, 0x22,
	0x94, 0xc6, 0xa2, 0x37, 0xbd, 0xb5, 0x10, 0x8b, 0x90, 0x8a, 0x6c, 0x52, 0xa8, 0xde, 0x84, 0x8d,
	0xae, 0x6d, 0xd0, 0x9a, 0x90, 0x6c, 0x2c, 0x3e, 0x4e, 0x9f, 0xac, 0xaf, 0xd2, 0xcd, 0x26, 0xd1,
	0x5c, 0x14, 0x7a, 0xb5, 0x33, 0xdf, 0xb7, 0x33, 0xf3, 0xcd, 0x0f, 0xdc, 0xc4, 0xe4, 0x9d, 0x05,
	0x01, 0x7b, 0x75, 0xe3, 0xd5, 0xa6, 0x1f, 0x46, 0x01, 0x0b, 0xbc, 0x64, 0xdd, 0xa7, 0x7b, 0xba,
	0x63, 0xb1, 0x1b, 0x7a, 0x83, 0xdc, 0x34, 0x04, 0xa5, 0x7f, 0x48, 0x50, 0x33, 0x53, 0x00, 0x9d,
	0x01, 0x08, 0xc6, 0x65, 0x87, 0x90, 0x76, 0xa4, 0xae, 0xd4, 0x53, 0xb0, 0x22, 0x10, 0x87, 0x03,
	0xe8, 0x16, 0x80, 0x30, 0x16, 0xf9, 0x5e, 0xc2, 0x68, 0xdc, 0xa9, 0x74, 0xe5, 0x9e, 0x3a, 0xd0,
	0x0c, 0x11, 0x6a, 0x8c, 0x0a, 0x02, 0x97, 0xfe, 0x20, 0x04, 0xd5, 0x15, 0x61, 0xa4, 0x23, 0xf3,
	0x54, 0x0d, 0x2c, 0xec, 0xff, 0x43, 0x50, 0x8e, 0x9f, 0x91, 0x06, 0xf2, 0x86, 0x1e, 0xf2, 0x52,
	0xa9, 0x89, 0xfe, 0x42, 0x6d, 0x4f, 0xb6, 0x09, 0xe5, 0xf9, 0x53, 0x2c, 0x73, 0xf4, 0x6b, 0x50,
	0x44, 0x1d, 0xcb, 0x8f, 0x19, 0x3a, 0x87, 0x7a, 0xd6, 0x00, 0x8f, 0x4b, 0x35, 0xd4, 0x33, 0x0d,
	0x38, 0x47, 0xf5, 0x4f, 0x09, 0x54, 0x81, 0x8c, 0xfd, 0x2d, 0xa3, 0xd1, 0x37, 0x45, 0x2e, 0xa0,
	0xf1, 0x46, 0xd8, 0x92, 0x0f, 0x88, 0x0b, 0xd9, 0xbd, 0xe4, 0xb5, 0x54, 0x81, 0xd9, 0x02, 0x42,
	0x77, 0xa0, 0xae, 0x45, 0x78, 0x36, 0x8c, 0xb4, 0x83, 0xe6, 0xe0, 0x9f, 0x51, 0xca, 0x6b, 0x64,
	0x4f, 0x3a, 0x1a, 0x0c, 0xeb, 0xa3, 0xad, 0x13, 0x80, 0x13, 0x83, 0xda, 0xd0, 0x1a, 0x4f, 0x2c,
	0xc7, 0xc4, 0xae, 0x33, 0x9f, 0x99, 0xee, 0xd3, 0xd4, 0x36, 0x1d, 0xed, 0x17, 0x6a, 0x02, 0xd8,
	0x93, 0xc7, 0x99, 0x65, 0xba, 0xa3, 0xe9, 0x5c, 0x93, 0xca, 0xbe, 0x65, 0x69, 0x15, 0xf4, 0x07,
	0x14, 0x6c, 0x3e, 0x98, 0xcf, 0x82, 0x96, 0x4b, 0x2e, 0x67, 0xab, 0xfa, 0x02, 0x5a, 0x42, 0x88,
	0x9d, 0x78, 0xf1, 0x32, 0xf2, 0x43, 0xe6, 0x07, 0xbb, 0x9f, 0xb6, 0x77, 0x05, 0xbf, 0x33, 0x91,
	0xc5, 0xea, 0x1a, 0xe5, 0x66, 0x70, 0x41, 0xde, 0x5f, 0x42, 0xbb, 0xb8, 0x1f, 0x83, 0xdf, 0x8f,
	0x51, 0xdc, 0xcf, 0x4c, 0x5a, 0xc0, 0xe9, 0x84, 0xbc, 0xba, 0xc0, 0x87, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x30, 0x48, 0x75, 0x07, 0x6d, 0x02, 0x00, 0x00,
}
